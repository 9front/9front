The standalone Windows installer for Mercurial is built in a somewhat
jury-rigged fashion.

It has the following prerequisites, at least as I build it:

  Python for Windows
      http://www.python.org/ftp/python/2.4.3/python-2.4.3.msi

  MinGW
      http://www.mingw.org/

  Python for Windows Extensions
      http://sourceforge.net/projects/pywin32/

  mfc71.dll (just download, don't install; not needed for Python 2.6)
      http://starship.python.net/crew/mhammond/win32/

  Visual C++ 2008 redistributable package (needed for Python 2.6)
      http://www.microsoft.com/downloads/details.aspx?familyid=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en
      
  The py2exe distutils extension
      http://sourceforge.net/projects/py2exe/

  GnuWin32 gettext utility
      http://gnuwin32.sourceforge.net/packages/gettext.htm

  Inno Setup
      http://www.jrsoftware.org/isinfo.php

  ISTool - optional
      http://www.istool.org/default.aspx/

  add_path (you need only add_path.exe in the zip file)
      http://www.barisione.org/apps.html#add_path

  Docutils
      http://docutils.sourceforge.net/

And, of course, Mercurial itself.

Once you have all this installed and built, clone a copy of the
Mercurial repository you want to package, and name the repo
C:\hg\hg-release.

In a shell, build a standalone copy of the hg.exe program:

  python setup.py build -c mingw32
  python setup.py py2exe -b 1

Note: the previously suggested combined command of "python setup.py build -c
mingw32 py2exe -b 1" doesn't work correctly anymore as it doesn't include the
extensions in the mercurial subdirectory.

If you want to create a file named setup.cfg with the contents:

[build]
compiler=mingw32

you can skip the first build step.

Copy add_path.exe into the dist directory that just got created.

If you are using Python up to version 2.5.4, copy mfc71.dll into the dist
directory that just got created.

If you are using Python 2.6 or later, after installing the Visual C++ 2008
redistributable package copy into the dist directory that just got created the
following files:
  - from the directory starting with
    Windows/WinSxS/x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8
    the files named: msvcm90.dll, msvcp90.dll and msvcr90.dll
  - from the directory starting with
    Windows/WinSxS/x86_Microsoft.VC90.MFC_1fc8b3b9a1e18e3b_9.0.21022.8
    the files named: mfc90.dll, mfc90u.dll, mfcm90.dll and mfcm90u.dll
  - from the directory named Windows/WinSxS/Manifests, the manifest file
    starting with x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8
    (rename it to Microsoft.VC90.CRT.manifest) and the manifest file starting
    with x86_Microsoft.VC90.MFC_1fc8b3b9a1e18e3b_9.0.21022.8 (rename it to
    Microsoft.VC90.MFC.manifest)

Before building the installer, you have to build Mercurial HTML documentation 
(or fix mercurial.iss to not reference the doc directory). Docutils does not
come with a ready-made script for rst2html.py, so you will have to write your
own and put it in %PATH% like:

  @python c:\pythonXX\scripts\rst2html.py %*

Then build the documentation with:

  cd doc
  mingw32-make RST2HTML=rst2html.bat html
  cd ..

If you use ISTool, you open the C:\hg\hg-release\contrib\win32\mercurial.iss
file and type Ctrl-F9 to compile the installer file.

Otherwise you run the Inno Setup compiler.  Assuming it's on the path you run:

  iscc contrib\win32\mercurial.iss

The actual installer will be in the C:\hg\hg-release\Output directory.

To automate the steps above you may want to create a batchfile based on the
following:

  echo [build] > setup.cfg
  echo compiler=mingw32 >> setup.cfg
  python setup.py py2exe -b 1
  cd doc
  mingw32-make RST2HTML=rst2html.bat html
  cd ..
  iscc contrib\win32\mercurial.iss

and run it from the root of the hg repository (c:\hg\hg-release).
